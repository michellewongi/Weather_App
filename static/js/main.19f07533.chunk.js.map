{"version":3,"sources":["components/WeatherImage.js","components/WeatherCards.js","containers/Home.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherImage","weatherType","nav","document","querySelectorAll","body","style","backgroundImage","backgroundRepeat","backgroundSize","icon","faCloud","faSun","faSnowflake","color","faCloudRain","WeatherCard","cloudiness","currentTemp","highTemp","humidity","lowTemp","windSpeed","className","fahrenheit","kelvin","Math","floor","Home","useState","city","setCity","weatherData","setWeatherData","query","URLSearchParams","useLocation","search","URL","useEffect","cityValue","get","axios","then","response","data","catch","error","console","warn","useMemo","clouds","all","main","temp","temp_max","temp_min","weather","wind","speed","href","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.19f07533.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCloud,\n  faSun,\n  faCloudRain,\n  faSnowflake,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction WeatherImage({ weatherType }) {\n  let nav = document.querySelectorAll(\"a\");\n  switch (weatherType) {\n    case \"Clouds\":\n      return (\n        (document.body.style.backgroundImage =\n          \"url('https://media.giphy.com/media/mno6BJfy8USic/source.gif')\"),\n        (document.body.style.backgroundRepeat = \"no-repeat\"),\n        (document.body.style.backgroundSize = \"cover\"),\n        (<FontAwesomeIcon icon={faCloud} />)\n      );\n    case \"Clear\":\n      return (\n        (document.body.style.backgroundImage =\n          \"url('https://media.giphy.com/media/QmH77NDL04OX5vWQZE/giphy.gif')\"),\n        (document.body.style.backgroundRepeat = \"no-repeat\"),\n        (document.body.style.backgroundSize = \"cover\"),\n        (<FontAwesomeIcon icon={faSun} />)\n      );\n    case \"Snow\":\n      return (\n        (document.body.style.backgroundImage =\n          \"url('https://media.giphy.com/media/bGaOdqeqYQKc0/giphy.gif)\"),\n        (document.body.style.backgroundRepeat = \"no-repeat\"),\n        (document.body.style.backgroundSize = \"cover\"),\n        (<FontAwesomeIcon icon={faSnowflake} />)\n      );\n    case \"Rain\":\n      return (\n        (document.body.style.backgroundImage =\n          \"url('https://i.gifer.com/AcU9.gif')\"),\n        (document.body.style.backgroundRepeat = \"no-repeat\"),\n        (document.body.style.backgroundSize = \"cover\"),\n        (document.body.style.color = \"white\"),\n        (nav[0].style.color = \"white\"),\n        (nav[1].style.color = \"white\"),\n        (nav[2].style.color = \"white\"),\n        (nav[3].style.color = \"white\"),\n        (<FontAwesomeIcon icon={faCloudRain} />)\n      );\n    default:\n      return <FontAwesomeIcon icon={faSun} />;\n  }\n}\n\nexport default WeatherImage;\n","import React from \"react\";\nimport WeatherImage from \"./WeatherImage\";\n\nfunction WeatherCard({\n  cloudiness,\n  currentTemp,\n  highTemp,\n  humidity,\n  lowTemp,\n  weatherType = \"Unknown\",\n  windSpeed,\n}) {\n  return (\n    <section className=\"WeatherCard\">\n      <p className=\"currentTemp\">\n        <div className=\"WeatherImageWrapper\">\n          <WeatherImage weatherType={weatherType}></WeatherImage>\n        </div>\n        Currently<strong>{currentTemp}°</strong>\n      </p>\n      <p className=\"weather-type\">\n        Weather Type: <strong> {weatherType}</strong>\n      </p>\n      <p className=\"cloudiness\">\n        Cloudiness: <strong> {cloudiness}%</strong>\n      </p>\n      <p className=\"humidity\">\n        Humidity: <strong> {humidity}%</strong>\n      </p>\n      <div className=\"highlow\">\n        <p className=\"high\">\n          High: <strong> {highTemp}°</strong>\n        </p>\n        <p className=\"low\">\n          Low: <strong> {lowTemp}°</strong>\n        </p>\n      </div>\n      <p className=\"wind\">\n        Wind Speed: <strong> {windSpeed} mph</strong>\n      </p>\n    </section>\n  );\n}\n\nexport default WeatherCard;\n","import React, { useEffect, useMemo, useState } from \"react\";\n//axios allows you to make HTTP requests\nimport axios from \"axios\";\nimport { useLocation } from \"react-router\";\nimport WeatherCard from \"../components/WeatherCards\";\n\nconst APIKey = \"8fb50a254d1d00c642f7408ac5294de5\";\n\n// URL search parameters\n// localhost:3000/?city=paris\n// Abstract away URL Search Params here to make it easier to use\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction fahrenheit(kelvin) {\n  let newTemp = Math.floor((kelvin - 273) * (9 / 5) + 32);\n  return newTemp;\n}\n\nfunction Home() {\n  const [city, setCity] = useState();\n  const [weatherData, setWeatherData] = useState();\n  let query = useQuery();\n\n  const URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${APIKey}`;\n\n  useEffect(() => {\n    const cityValue = query.get(\"city\");\n    setCity(cityValue);\n  }, [query]);\n\n  useEffect(() => {\n    // Get weather data from weather API\n    if (city) {\n      axios\n        .get(URL)\n        .then(function (response) {\n          setWeatherData(response.data);\n        })\n        .catch(function (error) {\n          console.warn(error);\n        });\n    }\n  }, [URL, city]);\n\n  // weatherType value changes which is why it is stored in memo\n  const {\n    cloudiness,\n    currentTemp,\n    highTemp,\n    humidity,\n    lowTemp,\n    weatherType,\n    windSpeed,\n  } = useMemo(() => {\n    if (!weatherData) return {};\n    // this is where we process data\n    return {\n      cloudiness: weatherData.clouds.all,\n      currentTemp: fahrenheit(weatherData.main.temp),\n      highTemp: fahrenheit(weatherData.main.temp_max),\n      humidity: weatherData.main.humidity,\n      lowTemp: fahrenheit(weatherData.main.temp_min),\n      weatherType: weatherData.weather[0].main,\n      windSpeed: weatherData.wind.speed,\n    };\n  }, [weatherData]);\n  return (\n    <main className=\"App\">\n      <header>\n        <div className=\"cities\">\n          <h3 className=\"picker\">Pick a city: </h3>\n          <p>\n            <a href=\"/?city=Beijing\">Beijing</a>\n          </p>\n          <p>\n            <a href=\"/?city=New+York\">New York</a>\n          </p>\n          <p>\n            <a href=\"/?city=London\">London</a>\n          </p>\n          <p>\n            <a href=\"/?city=Los+Angeles\">Los Angeles</a>\n          </p>\n        </div>\n      </header>\n      <h1 className=\"city-name\">{city}</h1>\n      <WeatherCard\n        cloudiness={cloudiness}\n        currentTemp={currentTemp}\n        highTemp={highTemp}\n        humidity={humidity}\n        lowTemp={lowTemp}\n        weatherType={weatherType}\n        windSpeed={windSpeed}\n      />\n    </main>\n  );\n}\n\nexport default Home;\n","import { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./containers/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}